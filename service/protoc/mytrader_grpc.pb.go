// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mytrader.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TraderClient is the client API for Trader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraderClient interface {
	Create(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderReply, error)
	Get(ctx context.Context, in *GetOrder, opts ...grpc.CallOption) (*OrderReply, error)
}

type traderClient struct {
	cc grpc.ClientConnInterface
}

func NewTraderClient(cc grpc.ClientConnInterface) TraderClient {
	return &traderClient{cc}
}

func (c *traderClient) Create(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := c.cc.Invoke(ctx, "/Trader/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traderClient) Get(ctx context.Context, in *GetOrder, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := c.cc.Invoke(ctx, "/Trader/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraderServer is the server API for Trader service.
// All implementations must embed UnimplementedTraderServer
// for forward compatibility
type TraderServer interface {
	Create(context.Context, *Order) (*OrderReply, error)
	Get(context.Context, *GetOrder) (*OrderReply, error)
	mustEmbedUnimplementedTraderServer()
}

// UnimplementedTraderServer must be embedded to have forward compatible implementations.
type UnimplementedTraderServer struct {
}

func (UnimplementedTraderServer) Create(context.Context, *Order) (*OrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTraderServer) Get(context.Context, *GetOrder) (*OrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTraderServer) mustEmbedUnimplementedTraderServer() {}

// UnsafeTraderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraderServer will
// result in compilation errors.
type UnsafeTraderServer interface {
	mustEmbedUnimplementedTraderServer()
}

func RegisterTraderServer(s grpc.ServiceRegistrar, srv TraderServer) {
	s.RegisterService(&Trader_ServiceDesc, srv)
}

func _Trader_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Trader/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).Create(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trader_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Trader/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraderServer).Get(ctx, req.(*GetOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// Trader_ServiceDesc is the grpc.ServiceDesc for Trader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Trader",
	HandlerType: (*TraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Trader_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Trader_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mytrader.proto",
}
